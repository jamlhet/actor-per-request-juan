##############
#    Akka    #
##############

akka {
  version = "2.2.3"
  home = ""
  loggers = [ "akka.event.slf4j.Slf4jLogger" ]
  event-handlers = []
  logger-startup-timeout = 5s
  event-handler-startup-timeout = -1s
  loglevel = "DEBUG"
  stdout-loglevel = "DEBUG"
  log-config-on-start = off
  log-dead-letters = 0
  log-dead-letters-during-shutdown = off
  extensions = []
  daemonic = off
  jvm-exit-on-fatal-error = on
  
  actor {
	provider = "akka.actor.LocalActorRefProvider" 
    guardian-supervisor-strategy = "akka.actor.DefaultSupervisorStrategy"
    creation-timeout = 20s
    reaper-interval = 5s
    serialize-messages = off
    serialize-creators = off
    unstarted-push-timeout = 10s
    
    typed {
      timeout = 5s
    }
    
    deployment {
     default {
       dispatcher = ""
       mailbox = ""
       router = "from-code"
       nr-of-instances = 1
       within = 5 seconds
       virtual-nodes-factor = 10
       routees {
         paths = []
       }
       resizer {
         lower-bound = 1
         upper-bound = 10
         pressure-threshold = 1
         rampup-rate = 0.2
         backoff-threshold = 0.3
          backoff-rate = 0.1
          stop-delay = 1s
          messages-per-resize = 10
        }
      }
    }
 
    default-dispatcher {
      type = "Dispatcher"
      executor = "fork-join-executor"
      fork-join-executor {
        parallelism-min = 256 
        parallelism-factor = 3.0
        parallelism-max = 256
      }
 
      thread-pool-executor {
        keep-alive-time = 60s
        core-pool-size-min = 16
        core-pool-size-factor = 3.0
        core-pool-size-max = 64
        max-pool-size-min = 16
        max-pool-size-factor  = 3.0
        max-pool-size-max = 64
        task-queue-size = -1
        task-queue-type = "linked"
        allow-core-timeout = on
      }
 
      shutdown-timeout = 1s
      throughput = 5
      throughput-deadline-time = 0ms
      attempt-teamwork = on
      mailbox-requirement = ""
    }
 
    default-mailbox {
      mailbox-type = "akka.dispatch.UnboundedMailbox"
      mailbox-capacity = 1000
      mailbox-push-timeout-time = 10s
      stash-capacity = -1
    }
 
    mailbox {
      requirements {
        "akka.dispatch.UnboundedMessageQueueSemantics" =
          akka.actor.mailbox.unbounded-queue-based
        "akka.dispatch.BoundedMessageQueueSemantics" =
          akka.actor.mailbox.bounded-queue-based
        "akka.dispatch.DequeBasedMessageQueueSemantics" =
          akka.actor.mailbox.unbounded-deque-based
        "akka.dispatch.UnboundedDequeBasedMessageQueueSemantics" =
          akka.actor.mailbox.unbounded-deque-based
        "akka.dispatch.BoundedDequeBasedMessageQueueSemantics" =
          akka.actor.mailbox.bounded-deque-based
        "akka.dispatch.MultipleConsumerSemantics" =
          akka.actor.mailbox.unbounded-queue-based
      }
 
      unbounded-queue-based {
        mailbox-type = "akka.dispatch.UnboundedMailbox"
      }
 
      bounded-queue-based {
        mailbox-type = "akka.dispatch.BoundedMailbox"
      }
 
      unbounded-deque-based {
        mailbox-type = "akka.dispatch.UnboundedDequeBasedMailbox"
      }
 
      bounded-deque-based {
        mailbox-type = "akka.dispatch.BoundedDequeBasedMailbox"
      }
    }
 
    debug {
      receive = off
      autoreceive = off
      lifecycle = off
      fsm = off
      event-stream = off
      unhandled = off
      router-misconfiguration = off
    }
 
    serializers {
      java = "akka.serialization.JavaSerializer"
      bytes = "akka.serialization.ByteArraySerializer"
    }
 
    serialization-bindings {
      "[B" = bytes
      "java.io.Serializable" = java
    }
 
    dsl {
      inbox-size = 1000
      default-timeout = 5s
    }
  }
 
  scheduler {
    tick-duration = 10ms
    ticks-per-wheel = 512
    implementation = akka.actor.LightArrayRevolverScheduler
    shutdown-timeout = 5s
  }
 
  io {
    pinned-dispatcher {
      type = "PinnedDispatcher"
      executor = "thread-pool-executor"
      thread-pool-executor.allow-core-pool-timeout = off
    }
 
    tcp {
      nr-of-selectors = 1
      max-channels = 256000
      selector-association-retries = 10
      batch-accept-limit = 10
      direct-buffer-size = 128 KiB
      direct-buffer-pool-limit = 1000
      register-timeout = 5s
      max-received-message-size = unlimited
      trace-logging = off
      selector-dispatcher = "akka.io.pinned-dispatcher"
      worker-dispatcher = "akka.actor.default-dispatcher"
      management-dispatcher = "akka.actor.default-dispatcher"
      file-io-dispatcher = "akka.actor.default-dispatcher"
      file-io-transferTo-limit = 512 KiB
      finish-connect-retries = 5
    }
 
    udp {
      nr-of-selectors = 1
      max-channels = 4096
      select-timeout = infinite
      selector-association-retries = 10
      receive-throughput = 3
      direct-buffer-size = 128 KiB
      direct-buffer-pool-limit = 1000
      received-message-size-limit = unlimited
      trace-logging = off
      selector-dispatcher = "akka.io.pinned-dispatcher"
      worker-dispatcher = "akka.actor.default-dispatcher"
      management-dispatcher = "akka.actor.default-dispatcher"
    }
 
    udp-connected {
      nr-of-selectors = 1
      max-channels = 4096
      select-timeout = infinite
      selector-association-retries = 10
      receive-throughput = 3
      direct-buffer-size = 128 KiB
      direct-buffer-pool-limit = 1000
      received-message-size-limit = unlimited
      trace-logging = off
      selector-dispatcher = "akka.io.pinned-dispatcher"
      worker-dispatcher = "akka.actor.default-dispatcher"
      management-dispatcher = "akka.actor.default-dispatcher"
    }
  }
}

##############
# spray-can  #
##############
spray.can {

  server {
    server-header = spray-can/${spray.version}
    ssl-encryption = off
    pipelining-limit = 8
    idle-timeout = infinite
    request-timeout = infinite
    timeout-timeout = 2 s
    timeout-handler = ""
    reaping-cycle = 250 ms
    stats-support = on
    remote-address-header = off
    raw-request-uri-header = off
    transparent-head-requests = on
    chunkless-streaming = off
    verbose-error-messages = on
    request-chunk-aggregation-limit = 1m
    response-header-size-hint = 512
    bind-timeout = infinite
    unbind-timeout = 1s
    registration-timeout = infinite
    default-host-header = ""
    automatic-back-pressure-handling = on

     back-pressure {
        noack-rate = 10
        reading-low-watermark = infinite
     }
     
     parsing = ${spray.can.parsing}
   }
 }
